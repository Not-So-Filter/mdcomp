Enigma Decompression Changes:

EniDec:

This:
		movem.l	d0-d7/a1-a5,-(sp)
		movea.w	d0,a3		; store starting art tile
		move.b	(a0)+,d0
		ext.w	d0
		movea.w	d0,a5		; store number of bits in inline copy value
		move.b	(a0)+,d4
		lsl.b	#3,d4		; store PCCVH flags bitfield
		movea.w	(a0)+,a2
		adda.w	a3,a2		; store incremental copy word
		movea.w	(a0)+,a4
		adda.w	a3,a4		; store literal copy word
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5	; get first word in format list
		moveq	#16,d6		; initial shift value

Is replaced with this:
		movea.w	d0,a3		; store starting art tile
		move.b	(a0)+,d0
		ext.w	d0
		movea.w	d0,a5		; store number of bits in inline copy value
		move.b	(a0)+,d4
		lsl.b	#3,d4		; store PCCVH flags bitfield
		movea.w	(a0)+,a2
		adda.w	a3,a2		; store incremental copy word
		movea.w	(a0)+,a4
		adda.w	a3,a4		; store literal copy word
		move.w	(a0)+,d5	; get first word in format list
		moveq	#16,d6		; initial shift value

Total cycles saved in this area: 142 cycles.
Total space saved in this area: 8 bytes.

EniDec_100 to the end of EniDec_111:

This:
		bsr.w	EniDec_FetchInlineValue
; loc_177E:
.loop:		move.w	d1,(a1)+	; copy inline value
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_1786:
EniDec_101:
		bsr.w	EniDec_FetchInlineValue
; loc_178A:
.loop:		move.w	d1,(a1)+	; copy inline value
		addq.w	#1,d1		; increment
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_1794:
EniDec_110:
		bsr.w	EniDec_FetchInlineValue
; loc_1798:
.loop:		move.w	d1,(a1)+	; copy inline value
		subq.w	#1,d1		; decrement
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_17A2:
EniDec_111:
		cmpi.w	#$F,d2
		beq.s	EniDec_Done
; loc_17A8:
.loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
		move.w	d1,(a1)+	; copy it
		dbf	d2,.loop	; and repeat

		bra.s	Eni_Loop

Is replaced with this:
		bsr.s	EniDec_FetchInlineValue
; loc_177E:
.loop:		move.w	d1,(a1)+	; copy inline value
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_1786:
EniDec_101:
		bsr.s	EniDec_FetchInlineValue
; loc_178A:
.loop:		move.w	d1,(a1)+	; copy inline value
		addq.w	#1,d1		; increment
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_1794:
EniDec_110:
		bsr.s	EniDec_FetchInlineValue
; loc_1798:
.loop:		move.w	d1,(a1)+	; copy inline value
		subq.w	#1,d1		; decrement
		dbf	d2,.loop	; repeat

		bra.s	Eni_Loop
; ===========================================================================
; loc_17A2:
EniDec_111:
		cmpi.w	#$F,d2
		beq.s	EniDec_Done
; loc_17A8:
.loop:		bsr.s	EniDec_FetchInlineValue	; fetch new inline value
		move.w	d1,(a1)+	; copy it
		dbf	d2,.loop	; and repeat

		bra.s	Eni_Loop

Total cycles saved in this area: 0 cycles.
Total space saved in this area: 8 bytes.

EniDec_Done:

This:
		subq.w	#1,a0		; go back by one byte
		cmpi.w	#16,d6		; were we going to start on a completely new byte?
		bne.s	.notnewbyte	; if not, branch
		subq.w	#1,a0		; and another one if needed
; loc_17CE:
.notnewbyte:
		move.w	a0,d0
		lsr.w	#1,d0		; are we on an odd byte?
		bcc.s	.evenbyte	; if not, branch
		addq.w	#1,a0		; ensure we're on an even byte
; loc_17D6:
.evenbyte:
		movem.l	(sp)+,d0-d7/a1-a5
		rts

Is replaced with this:
		cmpi.b	#16,d6		; were we going to start on a completely new byte?
		bne.s	.notnewbyte	; if not, branch
		subq.w	#1,a0		; and another one if needed
; loc_17CE:
.notnewbyte:
		move.l	a0,d0
		andi.w	#$FFFE,d0
		movea.l	d0,a0
		rts

Total cycles saved in this area: 138 cycles.
Total space saved in this area: 6 bytes.

EniDec_FetchInlineValue:

This:
		move.w	a3,d3		; copy starting art tile
		move.b	d4,d1		; copy PCCVH bitfield
		add.b	d1,d1		; is the priority bit set?
		bcc.s	.skippriority	; if not, branch
		subq.w	#1,d6
		btst	d6,d5		; is the priority bit set in the inline render flags?
		beq.s	.skippriority	; if not, branch
		ori.w	#$8000,d3	; otherwise set priority bit in art tile
; loc_17EE:
.skippriority:
		add.b	d1,d1		; is the high palette line bit set?
		bcc.s	.skiphighpal	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skiphighpal
		addi.w	#$4000,d3	; set second palette line bit
; loc_17FC:
.skiphighpal:
		add.b	d1,d1		; is the low palette line bit set?
		bcc.s	.skiplowpal	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skiplowpal
		addi.w	#$2000,d3	; set first palette line bit
; loc_180A:
.skiplowpal:
		add.b	d1,d1		; is the vertical flip flag set?
		bcc.s	.skipyflip	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skipyflip
		ori.w	#$1000,d3	; set Y-flip bit
; loc_1818:
.skipyflip:
		add.b	d1,d1		; is the horizontal flip flag set?
		bcc.s	.skipxflip	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skipxflip
		ori.w	#$800,d3	; set X-flip bit
; loc_1826:
.skipxflip:
		move.w	d5,d1
		move.w	d6,d7
		sub.w	a5,d7		; subtract length in bits of inline copy value
		bcc.s	.enoughbits	; branch if a new word doesn't need to be read
		move.w	d7,d6
		addi.w	#16,d6
		neg.w	d7		; calculate bit deficit
		lsl.w	d7,d1		; and make space for that many bits
		move.b	(a0),d5		; get next byte
		rol.b	d7,d5		; and rotate the required bits into the lowest positions
		add.w	d7,d7
		and.w	EniDec_Masks-2(pc,d7.w),d5
		add.w	d5,d1		; combine upper bits with lower bits
; loc_1844:
.maskvalue:
		move.w	a5,d0		; get length in bits of inline copy value
		add.w	d0,d0
		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
		add.w	d3,d1		; add starting art tile
		move.b	(a0)+,d5
		lsl.w	#8,d5
		move.b	(a0)+,d5	; get next word
		rts
		
Is replaced with this:
		move.w	a3,d3		; copy starting art tile
		move.b	d4,d1		; copy PCCVH bitfield
		add.b	d1,d1		; is the priority bit set?
		bcc.s	.skippriority	; if not, branch
		subq.b	#1,d6
		btst	d6,d5		; is the priority bit set in the inline render flags?
		beq.s	.skippriority	; if not, branch
		ori.w	#$8000,d3	; otherwise set priority bit in art tile
; loc_17EE:
.skippriority:
		add.b	d1,d1		; is the high palette line bit set?
		bcc.s	.skiphighpal	; if not, branch
		subq.b	#1,d6
		btst	d6,d5
		beq.s	.skiphighpal
		addi.w	#$4000,d3	; set second palette line bit
; loc_17FC:
.skiphighpal:
		add.b	d1,d1		; is the low palette line bit set?
		bcc.s	.skiplowpal	; if not, branch
		subq.b	#1,d6
		btst	d6,d5
		beq.s	.skiplowpal
		addi.w	#$2000,d3	; set first palette line bit
; loc_180A:
.skiplowpal:
		add.b	d1,d1		; is the vertical flip flag set?
		bcc.s	.skipyflip	; if not, branch
		subq.b	#1,d6
		btst	d6,d5
		beq.s	.skipyflip
		ori.w	#$1000,d3	; set Y-flip bit
; loc_1818:
.skipyflip:
		add.b	d1,d1		; is the horizontal flip flag set?
		bcc.s	.skipxflip	; if not, branch
		subq.b	#1,d6
		btst	d6,d5
		beq.s	.skipxflip
		ori.w	#$800,d3	; set X-flip bit
; loc_1826:
.skipxflip:
		move.w	d5,d1
		move.b	d6,d7
		sub.w	a5,d7		; subtract length in bits of inline copy value
		bcc.s	.enoughbits	; branch if a new word doesn't need to be read
		move.b	d7,d6
		addi.b	#16,d6
		neg.w	d7		; calculate bit deficit
		lsl.w	d7,d1		; and make space for that many bits
		move.b	(a0),d5		; get next byte
		rol.b	d7,d5		; and rotate the required bits into the lowest positions
		add.w	d7,d7
		and.w	EniDec_Masks-2(pc,d7.w),d5
		add.w	d5,d1		; combine upper bits with lower bits
; loc_1844:
.maskvalue:
		move.w	a5,d0		; get length in bits of inline copy value
		add.w	d0,d0
		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
		add.w	d3,d1		; add starting art tile
		move.b	(a0)+,-(sp)
		move.w	(sp)+,d5
		move.b	(a0)+,d5	; get next word
		rts
		
Total cycles saved in this area: 10 cycles.
Total space saved in this area: 0 bytes.

EniDec_FetchByte:

This:
		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
		cmpi.w	#9,d6	; does a new byte need to be read?
		bhs.s	.locret	; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
.locret:
		rts
		
Is replaced with this:
		sub.b	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
		cmpi.b	#9,d6	; does a new byte need to be read?
		bhs.s	.locret	; if not, branch
		addq.b	#8,d6
		move.b	d5,-(sp)
		move.w	(sp)+,d5
		clr.b	d5
		move.b	(a0)+,d5
.locret:
		rts

Total cycles saved in this area: 2 cycles.
Total space saved in this area: -4 bytes.

Total cycles saved altogether: 292 cycles.
Total space saved altogether: 18 bytes.